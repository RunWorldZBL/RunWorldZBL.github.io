<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端工程化 webpack</title>
    <url>/2020/08/28/webpack/</url>
    <content><![CDATA[<h4 id="什么是前端工程化？"><a href="#什么是前端工程化？" class="headerlink" title="什么是前端工程化？"></a>什么是前端工程化？</h4><p>前端工程化是指将前端开发的流程规范化、标准化，包括开发流程、技术选型、代码规范、构建发布等，用于提升前端工程师的开发效率和代码质量。</p>
<h4 id="为什么要前端工程化？"><a href="#为什么要前端工程化？" class="headerlink" title="为什么要前端工程化？"></a>为什么要前端工程化？</h4><ol>
<li>复杂度高：前端的多功能、多页面、多状态、多系统</li>
<li>规模大：团队开发，多人协作，代码质量管理</li>
<li>要求高：页面性能优化（CDN/异步加载/请求合并），CSS兼容性、单页面应用、服务端渲染…<a id="more"></a>
<h4 id="怎么做到前端工程化？"><a href="#怎么做到前端工程化？" class="headerlink" title="怎么做到前端工程化？"></a>怎么做到前端工程化？</h4></li>
</ol>
<ul>
<li>从业务着手</li>
</ul>
<p>简单的单页面应用，使用gulp打包+同步工具实现开发全流程</p>
<ul>
<li>从复杂度考虑</li>
</ul>
<p>框架最终要服务于我们的项目，而非累死累活的去维护框架</p>
<ul>
<li>从已知到未知</li>
</ul>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>大前端</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化工具gulp</title>
    <url>/2020/08/28/gulp/</url>
    <content><![CDATA[<blockquote>
<p>ps: 自动化工具gulp，热刷新、编译css、压缩js</p>
</blockquote>
<h1 id="初始gulp"><a href="#初始gulp" class="headerlink" title="初始gulp"></a>初始gulp</h1><ul>
<li>易于使用</li>
<li>构建快速</li>
<li>插件系统</li>
<li>易于学习</li>
</ul>
<a id="more"></a>

<p><a href="https://gulpjs.com/">官方网站</a>    <a href="https://www.gulpjs.com.cn/">中文网站</a></p>
<blockquote>
<p>gulp的配置文件是 gulpfile.js 。当执行gulp命令时，就会在配置文件中寻处理的任务</p>
</blockquote>
<h2 id="gulp的概念"><a href="#gulp的概念" class="headerlink" title="gulp的概念"></a>gulp的概念</h2><p>任务：把所有的处理的文件，分成任务处理，每一个任务里都有输入和输出的文件<br><br><br>下图是执行的几个环节：<br><img data-src="./gulp.jpg" alt="gulp工作"></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>大前端</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack五大核心概念</title>
    <url>/2020/08/28/webpack%E4%BA%94%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1670861/1593610346026-ac5d5fe1-6cd6-435b-8433-fb8f01b0539b.png#align=left&display=inline&height=618&margin=%5Bobject%20Object%5D&originHeight=618&originWidth=1148&status=done&style=none&width=1148"><br><a href="https://www.webpackjs.com/">webpage 中文官网</a><br></p>
<a id="more"></a>
<p><a name="g704F"></a></p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><a name="jUAPO"></a></p>
<h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: <span class="string">&#x27;./path/to/my/enter/file.js&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">告知webpack从哪个文件开始去阅读去查验代码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a name="bW4uG"></a></p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: <span class="string">&#x27;./path/to/my/enter/file.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">  	path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output是webpack给出的结果</span></span><br><span class="line"><span class="comment">打包出的路径是什么，名字是什么…</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a name="By6cH"></a></p>
<h4 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	output: &#123;</span><br><span class="line">  	filename: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">  	rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">raw-loader去处理txt文件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a name="kCe8r"></a></p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">//npm安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="built_in">module</span>: &#123;</span><br><span class="line">  	rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">  	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loader 处理webpack本身不能处理的文件，即非js文件<br>plugins 能处理更复杂的任务<br><a name="g3XxB"></a></p>
<h4 id="模式-兼容性"><a href="#模式-兼容性" class="headerlink" title="模式/兼容性"></a>模式/兼容性</h4><p>webpack支持所有符合ES5标准的浏览器（不支持IE8及以下的版本）。webpack的import()和require.ensure()需要promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要提前加载polyfill。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>
<p>然后，使用 import 将其导入到主bundle文件：<br><strong>src/index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;babel-polyfill&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  element.innerHTML = join([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;webpack&#x27;</span>], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>大前端</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
